// Code generated by protoc-gen-gogo.
// source: command/command.proto
// DO NOT EDIT!

/*
	Package command is a generated protocol buffer package.

	It is generated from these files:
		command/command.proto

	It has these top-level messages:
		ICommand
		RequestCmd
		RequestJoinRoomCmd
		JoinResult
		NotifyChangeSceneCmd
		PositionInfo
		AddPlayersToSceneCmd
		Item
		ItemAttrib
		KeyValuePair_Int32_Item
		MainAttrib
		Package
		Packages
		PlayerData
		PlayerInfo
		UserAttrib
		RemovePlayerFromSceneCmd
		UpdatePlayerPositionCmd
		LoadLevelFinishedCmd
		RequestMessage
		HandshakeCmd
		ServerTestRequest
		Response
*/
package command

import proto "github.com/gogo/protobuf/proto"
import math "math"
import "base/xnet"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto"

import io "io"
import fmt "fmt"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type ICommand struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ICommand) Reset()         { *m = ICommand{} }
func (m *ICommand) String() string { return proto.CompactTextString(m) }
func (*ICommand) ProtoMessage()    {}
func (m *ICommand) IsNil() bool    { return nil == m || (*ICommand)(nil) == m }

type RequestCmd struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RequestCmd) Reset()         { *m = RequestCmd{} }
func (m *RequestCmd) String() string { return proto.CompactTextString(m) }
func (*RequestCmd) ProtoMessage()    {}
func (m *RequestCmd) IsNil() bool    { return nil == m || (*RequestCmd)(nil) == m }

type RequestJoinRoomCmd struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" form:"name"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RequestJoinRoomCmd) Reset()         { *m = RequestJoinRoomCmd{} }
func (m *RequestJoinRoomCmd) String() string { return proto.CompactTextString(m) }
func (*RequestJoinRoomCmd) ProtoMessage()    {}
func (m *RequestJoinRoomCmd) IsNil() bool    { return nil == m || (*RequestJoinRoomCmd)(nil) == m }

func (m *RequestJoinRoomCmd) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type JoinResult struct {
	Uid              uint32 `protobuf:"varint,1,opt,name=uid,def=0" json:"uid" form:"uid"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *JoinResult) Reset()         { *m = JoinResult{} }
func (m *JoinResult) String() string { return proto.CompactTextString(m) }
func (*JoinResult) ProtoMessage()    {}
func (m *JoinResult) IsNil() bool    { return nil == m || (*JoinResult)(nil) == m }

const Default_JoinResult_Uid uint32 = 0

func (m *JoinResult) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return Default_JoinResult_Uid
}

type NotifyChangeSceneCmd struct {
	Id               int32         `protobuf:"varint,1,opt,name=id,def=0" json:"id" form:"id"`
	Pos              *PositionInfo `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty" form:"pos"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *NotifyChangeSceneCmd) Reset()         { *m = NotifyChangeSceneCmd{} }
func (m *NotifyChangeSceneCmd) String() string { return proto.CompactTextString(m) }
func (*NotifyChangeSceneCmd) ProtoMessage()    {}
func (m *NotifyChangeSceneCmd) IsNil() bool    { return nil == m || (*NotifyChangeSceneCmd)(nil) == m }

const Default_NotifyChangeSceneCmd_Id int32 = 0

func (m *NotifyChangeSceneCmd) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return Default_NotifyChangeSceneCmd_Id
}

func (m *NotifyChangeSceneCmd) GetPos() *PositionInfo {
	if m != nil {
		return m.Pos
	}
	return nil
}

type PositionInfo struct {
	X                float32 `protobuf:"fixed32,1,opt,name=x,def=0" json:"x" form:"x"`
	Y                float32 `protobuf:"fixed32,2,opt,name=y,def=0" json:"y" form:"y"`
	Z                float32 `protobuf:"fixed32,3,opt,name=z,def=0" json:"z" form:"z"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PositionInfo) Reset()         { *m = PositionInfo{} }
func (m *PositionInfo) String() string { return proto.CompactTextString(m) }
func (*PositionInfo) ProtoMessage()    {}
func (m *PositionInfo) IsNil() bool    { return nil == m || (*PositionInfo)(nil) == m }

const Default_PositionInfo_X float32 = 0
const Default_PositionInfo_Y float32 = 0
const Default_PositionInfo_Z float32 = 0

func (m *PositionInfo) GetX() float32 {
	if m != nil {
		return m.X
	}
	return Default_PositionInfo_X
}

func (m *PositionInfo) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return Default_PositionInfo_Y
}

func (m *PositionInfo) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return Default_PositionInfo_Z
}

type AddPlayersToSceneCmd struct {
	List             []*PlayerInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty" form:"list"`
	Refresh          bool          `protobuf:"varint,2,opt,name=refresh,def=0" json:"refresh" form:"refresh"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *AddPlayersToSceneCmd) Reset()         { *m = AddPlayersToSceneCmd{} }
func (m *AddPlayersToSceneCmd) String() string { return proto.CompactTextString(m) }
func (*AddPlayersToSceneCmd) ProtoMessage()    {}
func (m *AddPlayersToSceneCmd) IsNil() bool    { return nil == m || (*AddPlayersToSceneCmd)(nil) == m }

const Default_AddPlayersToSceneCmd_Refresh bool = false

func (m *AddPlayersToSceneCmd) GetList() []*PlayerInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *AddPlayersToSceneCmd) GetRefresh() bool {
	if m != nil {
		return m.Refresh
	}
	return Default_AddPlayersToSceneCmd_Refresh
}

type Item struct {
	ID               int32       `protobuf:"varint,1,opt,def=0" json:"ID" form:"ID"`
	Base             int32       `protobuf:"varint,2,opt,def=0" json:"Base" form:"Base"`
	Num              int32       `protobuf:"varint,3,opt,def=0" json:"Num" form:"Num"`
	Attrib           *ItemAttrib `protobuf:"bytes,4,opt" json:"Attrib,omitempty" form:"Attrib"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (m *Item) IsNil() bool    { return nil == m || (*Item)(nil) == m }

const Default_Item_ID int32 = 0
const Default_Item_Base int32 = 0
const Default_Item_Num int32 = 0

func (m *Item) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return Default_Item_ID
}

func (m *Item) GetBase() int32 {
	if m != nil {
		return m.Base
	}
	return Default_Item_Base
}

func (m *Item) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return Default_Item_Num
}

func (m *Item) GetAttrib() *ItemAttrib {
	if m != nil {
		return m.Attrib
	}
	return nil
}

type ItemAttrib struct {
	Equiped          int32   `protobuf:"varint,1,opt,def=0" json:"Equiped" form:"Equiped"`
	ForgeLevel       int32   `protobuf:"varint,2,opt,def=0" json:"ForgeLevel" form:"ForgeLevel"`
	BulletNum        int32   `protobuf:"varint,3,opt,def=0" json:"BulletNum" form:"BulletNum"`
	WaferExp         int32   `protobuf:"varint,4,opt,def=0" json:"WaferExp" form:"WaferExp"`
	Clicked          bool    `protobuf:"varint,5,opt,def=0" json:"Clicked" form:"Clicked"`
	AdvanceLevel     int32   `protobuf:"varint,6,opt,def=0" json:"AdvanceLevel" form:"AdvanceLevel"`
	RefineLevel      int32   `protobuf:"varint,7,opt,def=0" json:"RefineLevel" form:"RefineLevel"`
	Components       []int32 `protobuf:"varint,8,rep" json:"Components,omitempty" form:"Components"`
	WaferLevel       int32   `protobuf:"varint,13,opt,def=0" json:"WaferLevel" form:"WaferLevel"`
	EquipExpired     int64   `protobuf:"varint,14,opt,def=0" json:"EquipExpired" form:"EquipExpired"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ItemAttrib) Reset()         { *m = ItemAttrib{} }
func (m *ItemAttrib) String() string { return proto.CompactTextString(m) }
func (*ItemAttrib) ProtoMessage()    {}
func (m *ItemAttrib) IsNil() bool    { return nil == m || (*ItemAttrib)(nil) == m }

const Default_ItemAttrib_Equiped int32 = 0
const Default_ItemAttrib_ForgeLevel int32 = 0
const Default_ItemAttrib_BulletNum int32 = 0
const Default_ItemAttrib_WaferExp int32 = 0
const Default_ItemAttrib_Clicked bool = false
const Default_ItemAttrib_AdvanceLevel int32 = 0
const Default_ItemAttrib_RefineLevel int32 = 0
const Default_ItemAttrib_WaferLevel int32 = 0
const Default_ItemAttrib_EquipExpired int64 = 0

func (m *ItemAttrib) GetEquiped() int32 {
	if m != nil {
		return m.Equiped
	}
	return Default_ItemAttrib_Equiped
}

func (m *ItemAttrib) GetForgeLevel() int32 {
	if m != nil {
		return m.ForgeLevel
	}
	return Default_ItemAttrib_ForgeLevel
}

func (m *ItemAttrib) GetBulletNum() int32 {
	if m != nil {
		return m.BulletNum
	}
	return Default_ItemAttrib_BulletNum
}

func (m *ItemAttrib) GetWaferExp() int32 {
	if m != nil {
		return m.WaferExp
	}
	return Default_ItemAttrib_WaferExp
}

func (m *ItemAttrib) GetClicked() bool {
	if m != nil {
		return m.Clicked
	}
	return Default_ItemAttrib_Clicked
}

func (m *ItemAttrib) GetAdvanceLevel() int32 {
	if m != nil {
		return m.AdvanceLevel
	}
	return Default_ItemAttrib_AdvanceLevel
}

func (m *ItemAttrib) GetRefineLevel() int32 {
	if m != nil {
		return m.RefineLevel
	}
	return Default_ItemAttrib_RefineLevel
}

func (m *ItemAttrib) GetComponents() []int32 {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *ItemAttrib) GetWaferLevel() int32 {
	if m != nil {
		return m.WaferLevel
	}
	return Default_ItemAttrib_WaferLevel
}

func (m *ItemAttrib) GetEquipExpired() int64 {
	if m != nil {
		return m.EquipExpired
	}
	return Default_ItemAttrib_EquipExpired
}

type KeyValuePair_Int32_Item struct {
	Key              int32  `protobuf:"varint,1,opt" json:"Key" form:"Key"`
	Value            *Item  `protobuf:"bytes,2,opt" json:"Value,omitempty" form:"Value"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *KeyValuePair_Int32_Item) Reset()         { *m = KeyValuePair_Int32_Item{} }
func (m *KeyValuePair_Int32_Item) String() string { return proto.CompactTextString(m) }
func (*KeyValuePair_Int32_Item) ProtoMessage()    {}
func (m *KeyValuePair_Int32_Item) IsNil() bool {
	return nil == m || (*KeyValuePair_Int32_Item)(nil) == m
}

func (m *KeyValuePair_Int32_Item) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *KeyValuePair_Int32_Item) GetValue() *Item {
	if m != nil {
		return m.Value
	}
	return nil
}

type MainAttrib struct {
	HPMax                   int32  `protobuf:"varint,1,opt,def=0" json:"HPMax" form:"HPMax"`
	Damage                  int32  `protobuf:"varint,2,opt,def=0" json:"Damage" form:"Damage"`
	Defense                 int32  `protobuf:"varint,3,opt,def=0" json:"Defense" form:"Defense"`
	Critical                int32  `protobuf:"varint,4,opt,def=0" json:"Critical" form:"Critical"`
	Tough                   int32  `protobuf:"varint,5,opt,def=0" json:"Tough" form:"Tough"`
	Hit                     int32  `protobuf:"varint,6,opt,def=0" json:"Hit" form:"Hit"`
	Block                   int32  `protobuf:"varint,7,opt,def=0" json:"Block" form:"Block"`
	MoveSpeed               int32  `protobuf:"varint,8,opt,def=0" json:"MoveSpeed" form:"MoveSpeed"`
	AttackSpeed             int32  `protobuf:"varint,9,opt,def=0" json:"AttackSpeed" form:"AttackSpeed"`
	CriticalDamage          int32  `protobuf:"varint,10,opt,def=0" json:"CriticalDamage" form:"CriticalDamage"`
	ReloadSpeed             int32  `protobuf:"varint,11,opt,def=0" json:"ReloadSpeed" form:"ReloadSpeed"`
	Battle                  int32  `protobuf:"varint,12,opt,def=0" json:"Battle" form:"Battle"`
	CriticalDamageReduction int32  `protobuf:"varint,13,opt,def=0" json:"CriticalDamageReduction" form:"CriticalDamageReduction"`
	EquipFight              int32  `protobuf:"varint,14,opt,def=0" json:"EquipFight" form:"EquipFight"`
	WeaponFight             int32  `protobuf:"varint,15,opt,def=0" json:"WeaponFight" form:"WeaponFight"`
	WaferFight              int32  `protobuf:"varint,16,opt,def=0" json:"WaferFight" form:"WaferFight"`
	JewelFight              int32  `protobuf:"varint,17,opt,def=0" json:"JewelFight" form:"JewelFight"`
	TechFight               int32  `protobuf:"varint,18,opt,def=0" json:"TechFight" form:"TechFight"`
	XXX_unrecognized        []byte `json:"-"`
}

func (m *MainAttrib) Reset()         { *m = MainAttrib{} }
func (m *MainAttrib) String() string { return proto.CompactTextString(m) }
func (*MainAttrib) ProtoMessage()    {}
func (m *MainAttrib) IsNil() bool    { return nil == m || (*MainAttrib)(nil) == m }

const Default_MainAttrib_HPMax int32 = 0
const Default_MainAttrib_Damage int32 = 0
const Default_MainAttrib_Defense int32 = 0
const Default_MainAttrib_Critical int32 = 0
const Default_MainAttrib_Tough int32 = 0
const Default_MainAttrib_Hit int32 = 0
const Default_MainAttrib_Block int32 = 0
const Default_MainAttrib_MoveSpeed int32 = 0
const Default_MainAttrib_AttackSpeed int32 = 0
const Default_MainAttrib_CriticalDamage int32 = 0
const Default_MainAttrib_ReloadSpeed int32 = 0
const Default_MainAttrib_Battle int32 = 0
const Default_MainAttrib_CriticalDamageReduction int32 = 0
const Default_MainAttrib_EquipFight int32 = 0
const Default_MainAttrib_WeaponFight int32 = 0
const Default_MainAttrib_WaferFight int32 = 0
const Default_MainAttrib_JewelFight int32 = 0
const Default_MainAttrib_TechFight int32 = 0

func (m *MainAttrib) GetHPMax() int32 {
	if m != nil {
		return m.HPMax
	}
	return Default_MainAttrib_HPMax
}

func (m *MainAttrib) GetDamage() int32 {
	if m != nil {
		return m.Damage
	}
	return Default_MainAttrib_Damage
}

func (m *MainAttrib) GetDefense() int32 {
	if m != nil {
		return m.Defense
	}
	return Default_MainAttrib_Defense
}

func (m *MainAttrib) GetCritical() int32 {
	if m != nil {
		return m.Critical
	}
	return Default_MainAttrib_Critical
}

func (m *MainAttrib) GetTough() int32 {
	if m != nil {
		return m.Tough
	}
	return Default_MainAttrib_Tough
}

func (m *MainAttrib) GetHit() int32 {
	if m != nil {
		return m.Hit
	}
	return Default_MainAttrib_Hit
}

func (m *MainAttrib) GetBlock() int32 {
	if m != nil {
		return m.Block
	}
	return Default_MainAttrib_Block
}

func (m *MainAttrib) GetMoveSpeed() int32 {
	if m != nil {
		return m.MoveSpeed
	}
	return Default_MainAttrib_MoveSpeed
}

func (m *MainAttrib) GetAttackSpeed() int32 {
	if m != nil {
		return m.AttackSpeed
	}
	return Default_MainAttrib_AttackSpeed
}

func (m *MainAttrib) GetCriticalDamage() int32 {
	if m != nil {
		return m.CriticalDamage
	}
	return Default_MainAttrib_CriticalDamage
}

func (m *MainAttrib) GetReloadSpeed() int32 {
	if m != nil {
		return m.ReloadSpeed
	}
	return Default_MainAttrib_ReloadSpeed
}

func (m *MainAttrib) GetBattle() int32 {
	if m != nil {
		return m.Battle
	}
	return Default_MainAttrib_Battle
}

func (m *MainAttrib) GetCriticalDamageReduction() int32 {
	if m != nil {
		return m.CriticalDamageReduction
	}
	return Default_MainAttrib_CriticalDamageReduction
}

func (m *MainAttrib) GetEquipFight() int32 {
	if m != nil {
		return m.EquipFight
	}
	return Default_MainAttrib_EquipFight
}

func (m *MainAttrib) GetWeaponFight() int32 {
	if m != nil {
		return m.WeaponFight
	}
	return Default_MainAttrib_WeaponFight
}

func (m *MainAttrib) GetWaferFight() int32 {
	if m != nil {
		return m.WaferFight
	}
	return Default_MainAttrib_WaferFight
}

func (m *MainAttrib) GetJewelFight() int32 {
	if m != nil {
		return m.JewelFight
	}
	return Default_MainAttrib_JewelFight
}

func (m *MainAttrib) GetTechFight() int32 {
	if m != nil {
		return m.TechFight
	}
	return Default_MainAttrib_TechFight
}

type Package struct {
	Items            []*KeyValuePair_Int32_Item `protobuf:"bytes,1,rep" json:"Items,omitempty" form:"Items"`
	Pages            int32                      `protobuf:"varint,2,opt,def=0" json:"Pages" form:"Pages"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *Package) Reset()         { *m = Package{} }
func (m *Package) String() string { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()    {}
func (m *Package) IsNil() bool    { return nil == m || (*Package)(nil) == m }

const Default_Package_Pages int32 = 0

func (m *Package) GetItems() []*KeyValuePair_Int32_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Package) GetPages() int32 {
	if m != nil {
		return m.Pages
	}
	return Default_Package_Pages
}

type Packages struct {
	BackPack         *Package `protobuf:"bytes,1,opt" json:"BackPack,omitempty" form:"BackPack"`
	Index            int32    `protobuf:"varint,2,opt,name=index,def=0" json:"index" form:"index"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Packages) Reset()         { *m = Packages{} }
func (m *Packages) String() string { return proto.CompactTextString(m) }
func (*Packages) ProtoMessage()    {}
func (m *Packages) IsNil() bool    { return nil == m || (*Packages)(nil) == m }

const Default_Packages_Index int32 = 0

func (m *Packages) GetBackPack() *Package {
	if m != nil {
		return m.BackPack
	}
	return nil
}

func (m *Packages) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return Default_Packages_Index
}

type PlayerData struct {
	EquipAttrib      *MainAttrib `protobuf:"bytes,1,opt" json:"EquipAttrib,omitempty" form:"EquipAttrib"`
	Packages         *Packages   `protobuf:"bytes,2,opt" json:"Packages,omitempty" form:"Packages"`
	UserAttrib       *UserAttrib `protobuf:"bytes,5,opt" json:"UserAttrib,omitempty" form:"UserAttrib"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *PlayerData) Reset()         { *m = PlayerData{} }
func (m *PlayerData) String() string { return proto.CompactTextString(m) }
func (*PlayerData) ProtoMessage()    {}
func (m *PlayerData) IsNil() bool    { return nil == m || (*PlayerData)(nil) == m }

func (m *PlayerData) GetEquipAttrib() *MainAttrib {
	if m != nil {
		return m.EquipAttrib
	}
	return nil
}

func (m *PlayerData) GetPackages() *Packages {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *PlayerData) GetUserAttrib() *UserAttrib {
	if m != nil {
		return m.UserAttrib
	}
	return nil
}

type PlayerInfo struct {
	Data             *PlayerData   `protobuf:"bytes,1,opt,name=data" json:"data,omitempty" form:"data"`
	Pos              *PositionInfo `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty" form:"pos"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *PlayerInfo) Reset()         { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()    {}
func (m *PlayerInfo) IsNil() bool    { return nil == m || (*PlayerInfo)(nil) == m }

func (m *PlayerInfo) GetData() *PlayerData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PlayerInfo) GetPos() *PositionInfo {
	if m != nil {
		return m.Pos
	}
	return nil
}

type UserAttrib struct {
	Uid              uint32  `protobuf:"varint,1,opt,name=uid,def=0" json:"uid" form:"uid"`
	Name             *string `protobuf:"bytes,2,opt" json:"Name,omitempty" form:"Name"`
	Role             int32   `protobuf:"varint,3,opt,def=0" json:"Role" form:"Role"`
	Level            int32   `protobuf:"varint,4,opt,def=0" json:"Level" form:"Level"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserAttrib) Reset()         { *m = UserAttrib{} }
func (m *UserAttrib) String() string { return proto.CompactTextString(m) }
func (*UserAttrib) ProtoMessage()    {}
func (m *UserAttrib) IsNil() bool    { return nil == m || (*UserAttrib)(nil) == m }

const Default_UserAttrib_Uid uint32 = 0
const Default_UserAttrib_Role int32 = 0
const Default_UserAttrib_Level int32 = 0

func (m *UserAttrib) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return Default_UserAttrib_Uid
}

func (m *UserAttrib) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *UserAttrib) GetRole() int32 {
	if m != nil {
		return m.Role
	}
	return Default_UserAttrib_Role
}

func (m *UserAttrib) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return Default_UserAttrib_Level
}

type RemovePlayerFromSceneCmd struct {
	Uid              uint32 `protobuf:"varint,1,opt,name=uid,def=0" json:"uid" form:"uid"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RemovePlayerFromSceneCmd) Reset()         { *m = RemovePlayerFromSceneCmd{} }
func (m *RemovePlayerFromSceneCmd) String() string { return proto.CompactTextString(m) }
func (*RemovePlayerFromSceneCmd) ProtoMessage()    {}
func (m *RemovePlayerFromSceneCmd) IsNil() bool {
	return nil == m || (*RemovePlayerFromSceneCmd)(nil) == m
}

const Default_RemovePlayerFromSceneCmd_Uid uint32 = 0

func (m *RemovePlayerFromSceneCmd) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return Default_RemovePlayerFromSceneCmd_Uid
}

type UpdatePlayerPositionCmd struct {
	Uid              uint32        `protobuf:"varint,1,opt,name=uid,def=0" json:"uid" form:"uid"`
	Pos              *PositionInfo `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty" form:"pos"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *UpdatePlayerPositionCmd) Reset()         { *m = UpdatePlayerPositionCmd{} }
func (m *UpdatePlayerPositionCmd) String() string { return proto.CompactTextString(m) }
func (*UpdatePlayerPositionCmd) ProtoMessage()    {}
func (m *UpdatePlayerPositionCmd) IsNil() bool {
	return nil == m || (*UpdatePlayerPositionCmd)(nil) == m
}

const Default_UpdatePlayerPositionCmd_Uid uint32 = 0

func (m *UpdatePlayerPositionCmd) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return Default_UpdatePlayerPositionCmd_Uid
}

func (m *UpdatePlayerPositionCmd) GetPos() *PositionInfo {
	if m != nil {
		return m.Pos
	}
	return nil
}

type LoadLevelFinishedCmd struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *LoadLevelFinishedCmd) Reset()         { *m = LoadLevelFinishedCmd{} }
func (m *LoadLevelFinishedCmd) String() string { return proto.CompactTextString(m) }
func (*LoadLevelFinishedCmd) ProtoMessage()    {}
func (m *LoadLevelFinishedCmd) IsNil() bool    { return nil == m || (*LoadLevelFinishedCmd)(nil) == m }

type RequestMessage struct {
	Type             int32  `protobuf:"varint,1,opt,def=0" json:"Type" form:"Type"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RequestMessage) Reset()         { *m = RequestMessage{} }
func (m *RequestMessage) String() string { return proto.CompactTextString(m) }
func (*RequestMessage) ProtoMessage()    {}
func (m *RequestMessage) IsNil() bool    { return nil == m || (*RequestMessage)(nil) == m }

const Default_RequestMessage_Type int32 = 0

func (m *RequestMessage) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return Default_RequestMessage_Type
}

type HandshakeCmd struct {
	Seed             int32  `protobuf:"varint,1,opt,name=seed,def=0" json:"seed" form:"seed"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *HandshakeCmd) Reset()         { *m = HandshakeCmd{} }
func (m *HandshakeCmd) String() string { return proto.CompactTextString(m) }
func (*HandshakeCmd) ProtoMessage()    {}
func (m *HandshakeCmd) IsNil() bool    { return nil == m || (*HandshakeCmd)(nil) == m }

const Default_HandshakeCmd_Seed int32 = 0

func (m *HandshakeCmd) GetSeed() int32 {
	if m != nil {
		return m.Seed
	}
	return Default_HandshakeCmd_Seed
}

type ServerTestRequest struct {
	Data             []byte `protobuf:"bytes,1,opt" json:"Data,omitempty" form:"Data"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ServerTestRequest) Reset()         { *m = ServerTestRequest{} }
func (m *ServerTestRequest) String() string { return proto.CompactTextString(m) }
func (*ServerTestRequest) ProtoMessage()    {}
func (m *ServerTestRequest) IsNil() bool    { return nil == m || (*ServerTestRequest)(nil) == m }

func (m *ServerTestRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Response struct {
	Error            *string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty" form:"error"`
	Data             *string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty" form:"data"`
	Id               uint32  `protobuf:"varint,3,opt,name=id,def=0" json:"id" form:"id"`
	Bin              []byte  `protobuf:"bytes,4,opt,name=bin" json:"bin,omitempty" form:"bin"`
	Mtype            int32   `protobuf:"varint,5,opt,name=mtype,def=0" json:"mtype" form:"mtype"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (m *Response) IsNil() bool    { return nil == m || (*Response)(nil) == m }

const Default_Response_Id uint32 = 0
const Default_Response_Mtype int32 = 0

func (m *Response) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func (m *Response) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *Response) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return Default_Response_Id
}

func (m *Response) GetBin() []byte {
	if m != nil {
		return m.Bin
	}
	return nil
}

func (m *Response) GetMtype() int32 {
	if m != nil {
		return m.Mtype
	}
	return Default_Response_Mtype
}

var command_factory = map[uint32]func() xnet.Message{
	1831505502: func() xnet.Message { return &ICommand{} },
	898810311:  func() xnet.Message { return &RequestCmd{} },
	1778072174: func() xnet.Message { return &RequestJoinRoomCmd{} },
	1154704239: func() xnet.Message { return &JoinResult{} },
	1140096707: func() xnet.Message { return &NotifyChangeSceneCmd{} },
	14601107:   func() xnet.Message { return &PositionInfo{} },
	386670522:  func() xnet.Message { return &AddPlayersToSceneCmd{} },
	166114659:  func() xnet.Message { return &Item{} },
	800043309:  func() xnet.Message { return &ItemAttrib{} },
	348080391:  func() xnet.Message { return &KeyValuePair_Int32_Item{} },
	889956299:  func() xnet.Message { return &MainAttrib{} },
	489608962:  func() xnet.Message { return &Package{} },
	1861748345: func() xnet.Message { return &Packages{} },
	30961755:   func() xnet.Message { return &PlayerData{} },
	42423483:   func() xnet.Message { return &PlayerInfo{} },
	204146541:  func() xnet.Message { return &UserAttrib{} },
	1251829909: func() xnet.Message { return &RemovePlayerFromSceneCmd{} },
	116507891:  func() xnet.Message { return &UpdatePlayerPositionCmd{} },
	144110570:  func() xnet.Message { return &LoadLevelFinishedCmd{} },
	74820540:   func() xnet.Message { return &RequestMessage{} },
	740953155:  func() xnet.Message { return &HandshakeCmd{} },
	537578478:  func() xnet.Message { return &ServerTestRequest{} },
	1115248525: func() xnet.Message { return &Response{} },
}

var command_hash_names = map[uint32]string{
	1831505502: "ICommand",
	898810311:  "RequestCmd",
	1778072174: "RequestJoinRoomCmd",
	1154704239: "JoinResult",
	1140096707: "NotifyChangeSceneCmd",
	14601107:   "PositionInfo",
	386670522:  "AddPlayersToSceneCmd",
	166114659:  "Item",
	800043309:  "ItemAttrib",
	348080391:  "KeyValuePair_Int32_Item",
	889956299:  "MainAttrib",
	489608962:  "Package",
	1861748345: "Packages",
	30961755:   "PlayerData",
	42423483:   "PlayerInfo",
	204146541:  "UserAttrib",
	1251829909: "RemovePlayerFromSceneCmd",
	116507891:  "UpdatePlayerPositionCmd",
	144110570:  "LoadLevelFinishedCmd",
	74820540:   "RequestMessage",
	740953155:  "HandshakeCmd",
	537578478:  "ServerTestRequest",
	1115248525: "Response",
}

var command_name_hashs = map[string]uint32{
	"ICommand":                 1831505502,
	"RequestCmd":               898810311,
	"RequestJoinRoomCmd":       1778072174,
	"JoinResult":               1154704239,
	"NotifyChangeSceneCmd":     1140096707,
	"PositionInfo":             14601107,
	"AddPlayersToSceneCmd":     386670522,
	"Item":                     166114659,
	"ItemAttrib":               800043309,
	"KeyValuePair_Int32_Item":  348080391,
	"MainAttrib":               889956299,
	"Package":                  489608962,
	"Packages":                 1861748345,
	"PlayerData":               30961755,
	"PlayerInfo":               42423483,
	"UserAttrib":               204146541,
	"RemovePlayerFromSceneCmd": 1251829909,
	"UpdatePlayerPositionCmd":  116507891,
	"LoadLevelFinishedCmd":     144110570,
	"RequestMessage":           74820540,
	"HandshakeCmd":             740953155,
	"ServerTestRequest":        537578478,
	"Response":                 1115248525,
}

func init() {
	// command.proto
	RegisterProtoFactroy(&command_factory, &command_hash_names, &command_name_hashs)
}
func (m *ICommand) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ICommand) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RequestCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RequestCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RequestJoinRoomCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RequestJoinRoomCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCommand(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JoinResult) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *JoinResult) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != Default_JoinResult_Uid {
		data[i] = 0x8
		i++
		i = encodeVarintCommand(data, i, uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NotifyChangeSceneCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NotifyChangeSceneCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != Default_NotifyChangeSceneCmd_Id {
		data[i] = 0x8
		i++
		i = encodeVarintCommand(data, i, uint64(m.Id))
	}
	if m.Pos != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCommand(data, i, uint64(m.Pos.Size()))
		n1, err := m.Pos.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PositionInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PositionInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != Default_PositionInfo_X {
		data[i] = 0xd
		i++
		i = encodeFixed32Command(data, i, uint32(math.Float32bits(m.X)))
	}
	if m.Y != Default_PositionInfo_Y {
		data[i] = 0x15
		i++
		i = encodeFixed32Command(data, i, uint32(math.Float32bits(m.Y)))
	}
	if m.Z != Default_PositionInfo_Z {
		data[i] = 0x1d
		i++
		i = encodeFixed32Command(data, i, uint32(math.Float32bits(m.Z)))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddPlayersToSceneCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AddPlayersToSceneCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			data[i] = 0xa
			i++
			i = encodeVarintCommand(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Refresh != Default_AddPlayersToSceneCmd_Refresh {
		data[i] = 0x10
		i++
		if m.Refresh {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Item) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Item) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != Default_Item_ID {
		data[i] = 0x8
		i++
		i = encodeVarintCommand(data, i, uint64(m.ID))
	}
	if m.Base != Default_Item_Base {
		data[i] = 0x10
		i++
		i = encodeVarintCommand(data, i, uint64(m.Base))
	}
	if m.Num != Default_Item_Num {
		data[i] = 0x18
		i++
		i = encodeVarintCommand(data, i, uint64(m.Num))
	}
	if m.Attrib != nil {
		data[i] = 0x22
		i++
		i = encodeVarintCommand(data, i, uint64(m.Attrib.Size()))
		n2, err := m.Attrib.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ItemAttrib) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ItemAttrib) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Equiped != Default_ItemAttrib_Equiped {
		data[i] = 0x8
		i++
		i = encodeVarintCommand(data, i, uint64(m.Equiped))
	}
	if m.ForgeLevel != Default_ItemAttrib_ForgeLevel {
		data[i] = 0x10
		i++
		i = encodeVarintCommand(data, i, uint64(m.ForgeLevel))
	}
	if m.BulletNum != Default_ItemAttrib_BulletNum {
		data[i] = 0x18
		i++
		i = encodeVarintCommand(data, i, uint64(m.BulletNum))
	}
	if m.WaferExp != Default_ItemAttrib_WaferExp {
		data[i] = 0x20
		i++
		i = encodeVarintCommand(data, i, uint64(m.WaferExp))
	}
	if m.Clicked != Default_ItemAttrib_Clicked {
		data[i] = 0x28
		i++
		if m.Clicked {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.AdvanceLevel != Default_ItemAttrib_AdvanceLevel {
		data[i] = 0x30
		i++
		i = encodeVarintCommand(data, i, uint64(m.AdvanceLevel))
	}
	if m.RefineLevel != Default_ItemAttrib_RefineLevel {
		data[i] = 0x38
		i++
		i = encodeVarintCommand(data, i, uint64(m.RefineLevel))
	}
	if len(m.Components) > 0 {
		for _, num := range m.Components {
			data[i] = 0x40
			i++
			i = encodeVarintCommand(data, i, uint64(num))
		}
	}
	if m.WaferLevel != Default_ItemAttrib_WaferLevel {
		data[i] = 0x68
		i++
		i = encodeVarintCommand(data, i, uint64(m.WaferLevel))
	}
	if m.EquipExpired != Default_ItemAttrib_EquipExpired {
		data[i] = 0x70
		i++
		i = encodeVarintCommand(data, i, uint64(m.EquipExpired))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KeyValuePair_Int32_Item) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *KeyValuePair_Int32_Item) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintCommand(data, i, uint64(m.Key))
	}
	if m.Value != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCommand(data, i, uint64(m.Value.Size()))
		n3, err := m.Value.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MainAttrib) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MainAttrib) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HPMax != Default_MainAttrib_HPMax {
		data[i] = 0x8
		i++
		i = encodeVarintCommand(data, i, uint64(m.HPMax))
	}
	if m.Damage != Default_MainAttrib_Damage {
		data[i] = 0x10
		i++
		i = encodeVarintCommand(data, i, uint64(m.Damage))
	}
	if m.Defense != Default_MainAttrib_Defense {
		data[i] = 0x18
		i++
		i = encodeVarintCommand(data, i, uint64(m.Defense))
	}
	if m.Critical != Default_MainAttrib_Critical {
		data[i] = 0x20
		i++
		i = encodeVarintCommand(data, i, uint64(m.Critical))
	}
	if m.Tough != Default_MainAttrib_Tough {
		data[i] = 0x28
		i++
		i = encodeVarintCommand(data, i, uint64(m.Tough))
	}
	if m.Hit != Default_MainAttrib_Hit {
		data[i] = 0x30
		i++
		i = encodeVarintCommand(data, i, uint64(m.Hit))
	}
	if m.Block != Default_MainAttrib_Block {
		data[i] = 0x38
		i++
		i = encodeVarintCommand(data, i, uint64(m.Block))
	}
	if m.MoveSpeed != Default_MainAttrib_MoveSpeed {
		data[i] = 0x40
		i++
		i = encodeVarintCommand(data, i, uint64(m.MoveSpeed))
	}
	if m.AttackSpeed != Default_MainAttrib_AttackSpeed {
		data[i] = 0x48
		i++
		i = encodeVarintCommand(data, i, uint64(m.AttackSpeed))
	}
	if m.CriticalDamage != Default_MainAttrib_CriticalDamage {
		data[i] = 0x50
		i++
		i = encodeVarintCommand(data, i, uint64(m.CriticalDamage))
	}
	if m.ReloadSpeed != Default_MainAttrib_ReloadSpeed {
		data[i] = 0x58
		i++
		i = encodeVarintCommand(data, i, uint64(m.ReloadSpeed))
	}
	if m.Battle != Default_MainAttrib_Battle {
		data[i] = 0x60
		i++
		i = encodeVarintCommand(data, i, uint64(m.Battle))
	}
	if m.CriticalDamageReduction != Default_MainAttrib_CriticalDamageReduction {
		data[i] = 0x68
		i++
		i = encodeVarintCommand(data, i, uint64(m.CriticalDamageReduction))
	}
	if m.EquipFight != Default_MainAttrib_EquipFight {
		data[i] = 0x70
		i++
		i = encodeVarintCommand(data, i, uint64(m.EquipFight))
	}
	if m.WeaponFight != Default_MainAttrib_WeaponFight {
		data[i] = 0x78
		i++
		i = encodeVarintCommand(data, i, uint64(m.WeaponFight))
	}
	if m.WaferFight != Default_MainAttrib_WaferFight {
		data[i] = 0x80
		i++
		data[i] = 0x1
		i++
		i = encodeVarintCommand(data, i, uint64(m.WaferFight))
	}
	if m.JewelFight != Default_MainAttrib_JewelFight {
		data[i] = 0x88
		i++
		data[i] = 0x1
		i++
		i = encodeVarintCommand(data, i, uint64(m.JewelFight))
	}
	if m.TechFight != Default_MainAttrib_TechFight {
		data[i] = 0x90
		i++
		data[i] = 0x1
		i++
		i = encodeVarintCommand(data, i, uint64(m.TechFight))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Package) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Package) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0xa
			i++
			i = encodeVarintCommand(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Pages != Default_Package_Pages {
		data[i] = 0x10
		i++
		i = encodeVarintCommand(data, i, uint64(m.Pages))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Packages) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Packages) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BackPack != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCommand(data, i, uint64(m.BackPack.Size()))
		n4, err := m.BackPack.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Index != Default_Packages_Index {
		data[i] = 0x10
		i++
		i = encodeVarintCommand(data, i, uint64(m.Index))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PlayerData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EquipAttrib != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCommand(data, i, uint64(m.EquipAttrib.Size()))
		n5, err := m.EquipAttrib.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Packages != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCommand(data, i, uint64(m.Packages.Size()))
		n6, err := m.Packages.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.UserAttrib != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintCommand(data, i, uint64(m.UserAttrib.Size()))
		n7, err := m.UserAttrib.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PlayerInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCommand(data, i, uint64(m.Data.Size()))
		n8, err := m.Data.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Pos != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCommand(data, i, uint64(m.Pos.Size()))
		n9, err := m.Pos.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserAttrib) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UserAttrib) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != Default_UserAttrib_Uid {
		data[i] = 0x8
		i++
		i = encodeVarintCommand(data, i, uint64(m.Uid))
	}
	if m.Name != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCommand(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if m.Role != Default_UserAttrib_Role {
		data[i] = 0x18
		i++
		i = encodeVarintCommand(data, i, uint64(m.Role))
	}
	if m.Level != Default_UserAttrib_Level {
		data[i] = 0x20
		i++
		i = encodeVarintCommand(data, i, uint64(m.Level))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemovePlayerFromSceneCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RemovePlayerFromSceneCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != Default_RemovePlayerFromSceneCmd_Uid {
		data[i] = 0x8
		i++
		i = encodeVarintCommand(data, i, uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdatePlayerPositionCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdatePlayerPositionCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != Default_UpdatePlayerPositionCmd_Uid {
		data[i] = 0x8
		i++
		i = encodeVarintCommand(data, i, uint64(m.Uid))
	}
	if m.Pos != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCommand(data, i, uint64(m.Pos.Size()))
		n10, err := m.Pos.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoadLevelFinishedCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LoadLevelFinishedCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RequestMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RequestMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != Default_RequestMessage_Type {
		data[i] = 0x8
		i++
		i = encodeVarintCommand(data, i, uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HandshakeCmd) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *HandshakeCmd) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seed != Default_HandshakeCmd_Seed {
		data[i] = 0x8
		i++
		i = encodeVarintCommand(data, i, uint64(m.Seed))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerTestRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ServerTestRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCommand(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Response) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCommand(data, i, uint64(len(*m.Error)))
		i += copy(data[i:], *m.Error)
	}
	if m.Data != nil {
		data[i] = 0x12
		i++
		i = encodeVarintCommand(data, i, uint64(len(*m.Data)))
		i += copy(data[i:], *m.Data)
	}
	if m.Id != Default_Response_Id {
		data[i] = 0x18
		i++
		i = encodeVarintCommand(data, i, uint64(m.Id))
	}
	if m.Bin != nil {
		data[i] = 0x22
		i++
		i = encodeVarintCommand(data, i, uint64(len(m.Bin)))
		i += copy(data[i:], m.Bin)
	}
	if m.Mtype != Default_Response_Mtype {
		data[i] = 0x28
		i++
		i = encodeVarintCommand(data, i, uint64(m.Mtype))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Command(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Command(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCommand(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *ICommand) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestCmd) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestJoinRoomCmd) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JoinResult) Size() (n int) {
	var l int
	_ = l
	if m.Uid != Default_JoinResult_Uid {
		n += 1 + sovCommand(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyChangeSceneCmd) Size() (n int) {
	var l int
	_ = l
	if m.Id != Default_NotifyChangeSceneCmd_Id {
		n += 1 + sovCommand(uint64(m.Id))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PositionInfo) Size() (n int) {
	var l int
	_ = l
	if m.X != Default_PositionInfo_X {
		n += 5
	}
	if m.Y != Default_PositionInfo_Y {
		n += 5
	}
	if m.Z != Default_PositionInfo_Z {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddPlayersToSceneCmd) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	if m.Refresh != Default_AddPlayersToSceneCmd_Refresh {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Item) Size() (n int) {
	var l int
	_ = l
	if m.ID != Default_Item_ID {
		n += 1 + sovCommand(uint64(m.ID))
	}
	if m.Base != Default_Item_Base {
		n += 1 + sovCommand(uint64(m.Base))
	}
	if m.Num != Default_Item_Num {
		n += 1 + sovCommand(uint64(m.Num))
	}
	if m.Attrib != nil {
		l = m.Attrib.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemAttrib) Size() (n int) {
	var l int
	_ = l
	if m.Equiped != Default_ItemAttrib_Equiped {
		n += 1 + sovCommand(uint64(m.Equiped))
	}
	if m.ForgeLevel != Default_ItemAttrib_ForgeLevel {
		n += 1 + sovCommand(uint64(m.ForgeLevel))
	}
	if m.BulletNum != Default_ItemAttrib_BulletNum {
		n += 1 + sovCommand(uint64(m.BulletNum))
	}
	if m.WaferExp != Default_ItemAttrib_WaferExp {
		n += 1 + sovCommand(uint64(m.WaferExp))
	}
	if m.Clicked != Default_ItemAttrib_Clicked {
		n += 2
	}
	if m.AdvanceLevel != Default_ItemAttrib_AdvanceLevel {
		n += 1 + sovCommand(uint64(m.AdvanceLevel))
	}
	if m.RefineLevel != Default_ItemAttrib_RefineLevel {
		n += 1 + sovCommand(uint64(m.RefineLevel))
	}
	if len(m.Components) > 0 {
		for _, e := range m.Components {
			n += 1 + sovCommand(uint64(e))
		}
	}
	if m.WaferLevel != Default_ItemAttrib_WaferLevel {
		n += 1 + sovCommand(uint64(m.WaferLevel))
	}
	if m.EquipExpired != Default_ItemAttrib_EquipExpired {
		n += 1 + sovCommand(uint64(m.EquipExpired))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyValuePair_Int32_Item) Size() (n int) {
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovCommand(uint64(m.Key))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MainAttrib) Size() (n int) {
	var l int
	_ = l
	if m.HPMax != Default_MainAttrib_HPMax {
		n += 1 + sovCommand(uint64(m.HPMax))
	}
	if m.Damage != Default_MainAttrib_Damage {
		n += 1 + sovCommand(uint64(m.Damage))
	}
	if m.Defense != Default_MainAttrib_Defense {
		n += 1 + sovCommand(uint64(m.Defense))
	}
	if m.Critical != Default_MainAttrib_Critical {
		n += 1 + sovCommand(uint64(m.Critical))
	}
	if m.Tough != Default_MainAttrib_Tough {
		n += 1 + sovCommand(uint64(m.Tough))
	}
	if m.Hit != Default_MainAttrib_Hit {
		n += 1 + sovCommand(uint64(m.Hit))
	}
	if m.Block != Default_MainAttrib_Block {
		n += 1 + sovCommand(uint64(m.Block))
	}
	if m.MoveSpeed != Default_MainAttrib_MoveSpeed {
		n += 1 + sovCommand(uint64(m.MoveSpeed))
	}
	if m.AttackSpeed != Default_MainAttrib_AttackSpeed {
		n += 1 + sovCommand(uint64(m.AttackSpeed))
	}
	if m.CriticalDamage != Default_MainAttrib_CriticalDamage {
		n += 1 + sovCommand(uint64(m.CriticalDamage))
	}
	if m.ReloadSpeed != Default_MainAttrib_ReloadSpeed {
		n += 1 + sovCommand(uint64(m.ReloadSpeed))
	}
	if m.Battle != Default_MainAttrib_Battle {
		n += 1 + sovCommand(uint64(m.Battle))
	}
	if m.CriticalDamageReduction != Default_MainAttrib_CriticalDamageReduction {
		n += 1 + sovCommand(uint64(m.CriticalDamageReduction))
	}
	if m.EquipFight != Default_MainAttrib_EquipFight {
		n += 1 + sovCommand(uint64(m.EquipFight))
	}
	if m.WeaponFight != Default_MainAttrib_WeaponFight {
		n += 1 + sovCommand(uint64(m.WeaponFight))
	}
	if m.WaferFight != Default_MainAttrib_WaferFight {
		n += 2 + sovCommand(uint64(m.WaferFight))
	}
	if m.JewelFight != Default_MainAttrib_JewelFight {
		n += 2 + sovCommand(uint64(m.JewelFight))
	}
	if m.TechFight != Default_MainAttrib_TechFight {
		n += 2 + sovCommand(uint64(m.TechFight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Package) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	if m.Pages != Default_Package_Pages {
		n += 1 + sovCommand(uint64(m.Pages))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Packages) Size() (n int) {
	var l int
	_ = l
	if m.BackPack != nil {
		l = m.BackPack.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Index != Default_Packages_Index {
		n += 1 + sovCommand(uint64(m.Index))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerData) Size() (n int) {
	var l int
	_ = l
	if m.EquipAttrib != nil {
		l = m.EquipAttrib.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Packages != nil {
		l = m.Packages.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.UserAttrib != nil {
		l = m.UserAttrib.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerInfo) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserAttrib) Size() (n int) {
	var l int
	_ = l
	if m.Uid != Default_UserAttrib_Uid {
		n += 1 + sovCommand(uint64(m.Uid))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Role != Default_UserAttrib_Role {
		n += 1 + sovCommand(uint64(m.Role))
	}
	if m.Level != Default_UserAttrib_Level {
		n += 1 + sovCommand(uint64(m.Level))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemovePlayerFromSceneCmd) Size() (n int) {
	var l int
	_ = l
	if m.Uid != Default_RemovePlayerFromSceneCmd_Uid {
		n += 1 + sovCommand(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePlayerPositionCmd) Size() (n int) {
	var l int
	_ = l
	if m.Uid != Default_UpdatePlayerPositionCmd_Uid {
		n += 1 + sovCommand(uint64(m.Uid))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoadLevelFinishedCmd) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestMessage) Size() (n int) {
	var l int
	_ = l
	if m.Type != Default_RequestMessage_Type {
		n += 1 + sovCommand(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HandshakeCmd) Size() (n int) {
	var l int
	_ = l
	if m.Seed != Default_HandshakeCmd_Seed {
		n += 1 + sovCommand(uint64(m.Seed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerTestRequest) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = len(*m.Error)
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Data != nil {
		l = len(*m.Data)
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Id != Default_Response_Id {
		n += 1 + sovCommand(uint64(m.Id))
	}
	if m.Bin != nil {
		l = len(m.Bin)
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Mtype != Default_Response_Mtype {
		n += 1 + sovCommand(uint64(m.Mtype))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommand(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommand(x uint64) (n int) {
	return sovCommand(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ICommand) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		switch fieldNum {
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *RequestCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		switch fieldNum {
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *RequestJoinRoomCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if stringLen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *JoinResult) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Uid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *NotifyChangeSceneCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &PositionInfo{}
			}
			if err := m.Pos.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *PositionInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(data[iNdEx-4])
			v |= uint32(data[iNdEx-3]) << 8
			v |= uint32(data[iNdEx-2]) << 16
			v |= uint32(data[iNdEx-1]) << 24
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(data[iNdEx-4])
			v |= uint32(data[iNdEx-3]) << 8
			v |= uint32(data[iNdEx-2]) << 16
			v |= uint32(data[iNdEx-1]) << 24
			m.Y = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(data[iNdEx-4])
			v |= uint32(data[iNdEx-3]) << 8
			v |= uint32(data[iNdEx-2]) << 16
			v |= uint32(data[iNdEx-1]) << 24
			m.Z = float32(math.Float32frombits(v))
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *AddPlayersToSceneCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &PlayerInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refresh", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Refresh = bool(v != 0)
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *Item) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			m.Base = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Base |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrib", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attrib == nil {
				m.Attrib = &ItemAttrib{}
			}
			if err := m.Attrib.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *ItemAttrib) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equiped", wireType)
			}
			m.Equiped = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Equiped |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForgeLevel", wireType)
			}
			m.ForgeLevel = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ForgeLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BulletNum", wireType)
			}
			m.BulletNum = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.BulletNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaferExp", wireType)
			}
			m.WaferExp = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.WaferExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clicked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clicked = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvanceLevel", wireType)
			}
			m.AdvanceLevel = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.AdvanceLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefineLevel", wireType)
			}
			m.RefineLevel = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RefineLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Components", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Components = append(m.Components, v)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaferLevel", wireType)
			}
			m.WaferLevel = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.WaferLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipExpired", wireType)
			}
			m.EquipExpired = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.EquipExpired |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *KeyValuePair_Int32_Item) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Key |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Item{}
			}
			if err := m.Value.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *MainAttrib) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HPMax", wireType)
			}
			m.HPMax = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.HPMax |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Damage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defense", wireType)
			}
			m.Defense = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Defense |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Critical", wireType)
			}
			m.Critical = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Critical |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tough", wireType)
			}
			m.Tough = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Tough |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hit", wireType)
			}
			m.Hit = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Hit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Block |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveSpeed", wireType)
			}
			m.MoveSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MoveSpeed |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackSpeed", wireType)
			}
			m.AttackSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.AttackSpeed |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CriticalDamage", wireType)
			}
			m.CriticalDamage = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CriticalDamage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReloadSpeed", wireType)
			}
			m.ReloadSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ReloadSpeed |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Battle", wireType)
			}
			m.Battle = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Battle |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CriticalDamageReduction", wireType)
			}
			m.CriticalDamageReduction = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CriticalDamageReduction |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipFight", wireType)
			}
			m.EquipFight = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.EquipFight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeaponFight", wireType)
			}
			m.WeaponFight = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.WeaponFight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaferFight", wireType)
			}
			m.WaferFight = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.WaferFight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JewelFight", wireType)
			}
			m.JewelFight = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.JewelFight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechFight", wireType)
			}
			m.TechFight = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TechFight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *Package) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &KeyValuePair_Int32_Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			m.Pages = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Pages |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *Packages) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackPack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackPack == nil {
				m.BackPack = &Package{}
			}
			if err := m.BackPack.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *PlayerData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipAttrib", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipAttrib == nil {
				m.EquipAttrib = &MainAttrib{}
			}
			if err := m.EquipAttrib.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Packages == nil {
				m.Packages = &Packages{}
			}
			if err := m.Packages.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAttrib", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserAttrib == nil {
				m.UserAttrib = &UserAttrib{}
			}
			if err := m.UserAttrib.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *PlayerInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &PlayerData{}
			}
			if err := m.Data.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &PositionInfo{}
			}
			if err := m.Pos.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *UserAttrib) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Uid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if stringLen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Role |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *RemovePlayerFromSceneCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Uid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *UpdatePlayerPositionCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Uid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &PositionInfo{}
			}
			if err := m.Pos.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *LoadLevelFinishedCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		switch fieldNum {
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *RequestMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *HandshakeCmd) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			m.Seed = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Seed |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *ServerTestRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append([]byte{}, data[iNdEx:postIndex]...)
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *Response) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if stringLen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Error = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if stringLen < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Data = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bin = append([]byte{}, data[iNdEx:postIndex]...)
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtype", wireType)
			}
			m.Mtype = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Mtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipCommand(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func skipCommand(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for {
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCommand
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommand(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommand = fmt.Errorf("proto: negative length found during unmarshaling")
)
